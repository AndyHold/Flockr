# Routes

# Home page
GET           /                                                                       controllers.Assets.at(path="/public/vue-front-end-goes-here", file="index.html")

# Auth routes
POST          /api/auth/users/signup                                                  controllers.AuthController.signup(request: Request)
POST          /api/auth/users/login                                                   controllers.AuthController.login(request: Request)
POST          /api/auth/users/logout                                                  controllers.AuthController.logout(request: Request)
POST          /api/auth/users/:userId/logout                                          controllers.AuthController.logoutById(userId: Int, request: Request)
GET           /api/auth/users/:email/available                                        controllers.AuthController.checkEmailAvailable(email: String)

# Traveller routes
GET           /api/users/all                                                          controllers.UserController.getAllTravellers()
GET           /api/users                                                              controllers.UserController.getTravellers()
GET           /api/users/search                                                       controllers.UserController.searchTravellers(request: Request)
GET           /api/users/nationalities                                                controllers.UserController.getNationalities(request: Request)
GET           /api/users/passports                                                    controllers.UserController.getAllPassports(request: Request)
GET           /api/users/types                                                        controllers.UserController.getTravellerTypes(request: Request)
GET           /api/users/roles                                                        controllers.RoleController.getAllRoles(request: Request)
GET           /api/users/:userId/roles                                                controllers.RoleController.getUsersRoles(userId: Int, request: Request)
GET           /api/users/:userId                                                      controllers.UserController.getTraveller(userId: Int, request: Request)
PATCH         /api/users/:userId                                                      controllers.UserController.updateTraveller(userId: Int, request: Request)
DELETE        /api/users/:userId                                                      controllers.UserController.deleteUser(userId: Int, request: Request)
PATCH         /api/users/:userId/roles                                                controllers.UserController.updateTravellerRole(userId: Int, request: Request)
PUT           /api/users/:userId/undodelete                                           controllers.UserController.undoDeleteUser(userId: Int, request: Request)

# Traveller photos routes
GET           /api/users/photos/:photoId                                              controllers.PhotoController.getPhoto(photoId: Int, request: Request)
DELETE        /api/users/photos/:photoId                                              controllers.PhotoController.deletePhoto(photoId: Int, request: Request)
GET           /api/users/:userId/photos                                               controllers.PhotoController.getPhotos(userId: Int, request: Request)
POST          /api/users/:userId/photos                                               controllers.PhotoController.uploadPhotoForUser(userId: Int, request: Request)
PATCH         /api/users/photos/:photoId                                              controllers.PhotoController.updatePermission(photoId: Int, request: Request)
GET           /api/users/photos/:photoId/thumbnail                                    controllers.PhotoController.getThumbnail(photoId: Int, request: Request)
PUT           /api/users/photos/:photoId/undodelete                                   controllers.PhotoController.undoDelete(photoId: Int, request: Request)
PUT           /api/users/:userId/profilephoto/:photoId/undo                           controllers.PhotoController.undoProfilePhoto(userId: Int, photoId: Int, request: Request)


# Destination Proposal endpoints
GET           /api/destinations/proposals                                             controllers.DestinationController.getProposals
GET           /api/destinations/proposals/:destinationProposalId                      controllers.DestinationController.getProposalById(destinationProposalId: Int)
POST          /api/users/:userId/destinations/:destinationId/proposals                controllers.DestinationController.addProposal(userId: Int, request: Request, destinationId: Int)
PATCH         /api/destinations/proposals/:destinationProposalId                      controllers.DestinationController.acceptProposal(destinationProposalId: Int)
PUT           /api/destinations/proposals/:destinationProposalId                      controllers.DestinationController.modifyProposal(destinationProposalId: Int, request: Request)
DELETE        /api/users/:userId/destinations/proposals/:destinationProposalId        controllers.DestinationController.rejectProposal(userId: Int, destinationProposalId: Int, request: Request)
PUT           /api/destinations/proposals/:destinationProposalId/undoReject           controllers.DestinationController.undoDeleteDestinationProposal(destinationProposalId: Int, request: Request)

# Destination Routes
GET           /api/destinations                                                       controllers.DestinationController.getDestinations(request: Request)
GET           /api/users/:userId/destinations                                         controllers.DestinationController.getUserDestinations(userId: Int, request: Request)
GET           /api/destinations/countries                                             controllers.DestinationController.getCountries
GET           /api/destinations/countries/:countryId/districts                        controllers.DestinationController.getDistricts(countryId: Int)
GET           /api/destinations/types                                                 controllers.DestinationController.getDestinationTypes
GET           /api/destinations/:destinationId                                        controllers.DestinationController.getDestination(destinationId: Int, request: Request)
DELETE        /api/destinations/:destinationId                                        controllers.DestinationController.deleteDestination(destinationId: Int, request: Request)
POST          /api/users/:userId/destinations                                         controllers.DestinationController.addDestination(userId: Int, request: Request)
PUT           /api/destinations/:destinationId                                        controllers.DestinationController.updateDestination(request: Request, destinationId: Int)
PUT           /api/destinations/:destinationId/undodelete                             controllers.DestinationController.undoDeleteDestination(destinationId: Int, request: Request)


# Destination photos routes
POST          /api/destinations/:destinationId/photos                                 controllers.DestinationController.addPhoto(destinationId: Int, request: Request)
GET           /api/destinations/:destinationId/photos                                 controllers.DestinationController.getPhotos(destinationId: Int, request: Request)
DELETE        /api/destinations/:destinationId/photos/:photoId                        controllers.DestinationController.deletePhoto(destinationId: Int, photoId: Int, request: Request)
PUT           /api/destinations/:destinationId/photos/:photoId/undodelete             controllers.DestinationController.undoPhotoDelete(destinationId: Int, photoId: Int, request: Request)

# Trip Routes
GET           /api/users/:userId/trips/high-level-trips                               controllers.TripController.getHighLevelTrips(userId: Int, request: Request)
GET           /api/users/:userId/trips                                                controllers.TripController.getTrips(request: Request, userId: Int)
POST          /api/users/:userId/trips                                                controllers.TripController.addTrip(userId: Int, request: Request)
DELETE        /api/users/:userId/trips/:tripId                                        controllers.TripController.deleteTrip(userId: Int, tripId : Int, request : Request)
GET           /api/users/:userId/trips/:tripId                                        controllers.TripController.getTrip(userId: Int, tripId: Int, request: Request)
PUT           /api/users/:userId/trips/:tripId                                        controllers.TripController.updateTrip(request: Request, userId: Int, tripId : Int)
PUT           /api/users/:userId/trips/:tripId/restore                                controllers.TripController.restoreTrip(userId: Int, tripId: Int, request: Request)

# Treasure Hunt Routes

PUT           /api/treasurehunts/:treasureHuntId                                      controllers.TreasureHuntController.editTreasureHunt(request: Request, treasureHuntId: Int)
DELETE        /api/treasurehunts/:treasureHuntId                                      controllers.TreasureHuntController.deleteTreasureHunt(request: Request, treasureHuntId: Int)
POST          /api/users/:userId/treasurehunts                                        controllers.TreasureHuntController.addTreasureHunt(request: Request, userId: Int)
GET           /api/users/:userId/treasurehunts                                        controllers.TreasureHuntController.getTreasureHuntsByUserId(request: Request, userId: Int)
GET           /api/treasurehunts                                                      controllers.TreasureHuntController.getAllTreasureHunts(request: Request)
PUT           /api/treasurehunts/:treasureHuntId/undodelete                           controllers.TreasureHuntController.undoDeleteTreasureHunt(treasureHuntId: Int, request: Request)

# Chat Routes

POST          /api/chats                                                              controllers.ChatController.createChat(request: Request)
GET           /api/chats                                                              controllers.ChatController.getChats(request: Request)
DELETE        /api/chats/message/:messageId                                           controllers.ChatController.deleteMessage(request: Request, messageId: Int)
PUT           /api/chats/:chatGroupId                                                 controllers.ChatController.editChat(request: Request, chatGroupId: Int)
DELETE        /api/chats/:chatGroupId                                                 controllers.ChatController.deleteChat(request: Request, chatGroupId: Int)
GET           /api/chats/:chatGroupId/messages                                        controllers.ChatController.getMessages(request: Request, chatGroupId: Int)
POST          /api/chats/:chatGroupId/message                                         controllers.ChatController.createMessage(request: Request, chatGroupId: Int)
POST          /api/chats/:chatGroupId/join                                            controllers.ChatController.joinRoom(request: Request, chatGroupId: Int)
GET           /api/chats/:chatGroupId/onlineUsers                                     controllers.ChatController.getOnlineUsers(request: Request, chatGroupId: Int)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                           controllers.Assets.at(path="/public", file)
GET           /ws                                                                     controllers.WebSocketController.socket()
GET           /*file                                                                  controllers.FrontendController.assetOrDefault(file)
